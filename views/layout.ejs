<!DOCTYPE html>
<html id="konga">
<head>
    <title>Konga</title>

    <base href="<%= typeof base_url != 'undefined' ? base_url : '' %>">

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">-->

    <!--STYLES-->
    <link rel="stylesheet" href="min/production.min.css?r=0.14.7">
    <!--STYLES END-->
</head>

<body class="body">
<%- body %>
<!--
    Client-side Templates
    ========================

    HTML templates are important prerequisites of modern, rich client applications.
    To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
    that you load these templates client-side.

    By default, your Gruntfile is configured to automatically load and precompile
    client-side JST templates in your `assets/templates` folder, then
    include them here automatically (between TEMPLATES and TEMPLATES END).

    To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Import templates from other directories
        + Use a different template engine (handlebars, jade, dust, etc.)
        + Internationalize your client-side templates using a server-side
          stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->


<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

-->

<% if (typeof loadScripts != 'undefined' && loadScripts ) {%>


<script src="js/dependencies/sails.io.js"></script>
<!--<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>-->

<!--SCRIPTS-->
<script src="min/production.min.js?r=0.14.7"></script>
<!--SCRIPTS END-->

<% }%>

<script>
  window.angularDebugEnabled = <%= angularDebugEnabled %>;


  // Disable console logs in production
  if (!window.angularDebugEnabled && window['console']) {
    window['console']['log'] = function () {
    };
  }

  if(window.initAngular) {
    angular.element(document).ready(function () {

      var initInjector = angular.injector(["ng"]);
      var $http = initInjector.get("$http");

      // Load initial configuration to window
      $http.get('api/settings')
        .then(function (response) {
          window.KONGA_CONFIG = response.data.data
          window.KONGA_CONFIG_ID = response.data.id
          angular.bootstrap(document, ['frontend']);
        })
        .catch(function (err) {
          alert("Error getting initial configuration")
        })


    });
  }


</script>

</body>
</html>
